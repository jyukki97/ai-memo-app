# 📝 PRD: **Memora** – AI 음성 메모장 웹서비스

---

## Overview

**Memora**는 AI 기반 웹 메모 애플리케이션으로, 사용자의 음성 또는 텍스트 입력을 받아 **AI가 자동으로 요약 및 분류**해주는 기능을 제공합니다. **STT(Speech-to-Text) 기술**을 통해 빠른 음성 메모 작성이 가능하며, 모든 데이터는 **웹 애플리케이션의 데이터베이스에 저장**됩니다.

### 문제 해결
기존 메모 서비스는 사용자의 메모를 단순 저장하는 데 그치는 경우가 많아, 시간이 지날수록 중요한 정보를 찾기 어렵고 효율적인 활용이 어려워집니다. 특히 회의록, 아이디어, 공부 내용 등 다양한 형태의 메모를 빠르게 작성하고 구조화하는 것이 점점 더 중요해지고 있습니다.

### 대상 사용자
- **직장인/프리랜서**: 회의나 작업 중 웹에서 빠르게 메모하고, 자동 정리되길 원함
- **대학생**: 노트북을 통해 수업 내용을 음성/텍스트로 기록하고 정리하길 원함
- **일반 사용자**: 웹에서 손쉽게 일상 메모를 작성하고 필요할 때 검색하길 원함

### 제공 가치
- **AI 요약**: 긴 메모를 간결한 핵심 요약으로 제공
- **카테고리 분류**: 자동 분류 기능을 통한 체계적인 메모 정리
- **STT 기반 음성 입력**: 빠른 음성 기반 메모 작성 가능
- **웹 접근성**: 설치 없이 브라우저에서 사용 가능

---

## Core Features

### 1. 텍스트 메모 작성
- **기능**: 사용자가 직접 웹에서 텍스트 입력
- **중요성**: 기본적인 메모 작성 기능으로 모든 사용자가 활용 가능
- **동작 방식**: React 기반 텍스트 에디터, 실시간 저장

### 2. 음성 입력 (STT 변환)
- **기능**: 마이크 입력을 실시간 텍스트로 변환
- **중요성**: 빠른 메모 작성과 접근성 향상
- **동작 방식**: Web Speech API 또는 외부 STT 서비스 연동

### 3. AI 요약
- **기능**: 긴 메모 내용을 간결하게 요약
- **중요성**: 핵심 정보 빠른 파악과 메모 효율성 증대
- **동작 방식**: OpenAI API 또는 유사 AI 서비스 활용

### 4. 자동 카테고리 분류
- **기능**: 메모 내용을 주제 기반으로 자동 분류
- **중요성**: 체계적인 메모 관리와 검색 효율성
- **동작 방식**: AI 기반 텍스트 분석 및 태그 생성

### 5. 검색 기능
- **기능**: 키워드, 작성일, 카테고리별 검색 가능
- **중요성**: 저장된 메모의 빠른 검색과 접근
- **동작 방식**: 데이터베이스 인덱싱 및 풀텍스트 검색

### 6. 데이터베이스 저장
- **기능**: 모든 메모는 서버의 DB에 저장
- **중요성**: 데이터 영속성과 동기화
- **동작 방식**: PostgreSQL 또는 MongoDB 활용

---

## User Experience

### 사용자 페르소나

#### 1. 직장인 김영희 (35세, 마케팅 매니저)
- **목표**: 회의 내용을 빠르게 기록하고 팀원과 공유
- **페인포인트**: 회의 중 타이핑이 어렵고, 나중에 정리가 번거로움
- **사용 시나리오**: 회의실에서 음성으로 메모 → AI 요약 → 팀원과 공유

#### 2. 대학생 박민수 (22세, 컴퓨터공학과)
- **목표**: 수업 내용을 체계적으로 정리하고 시험 대비
- **페인포인트**: 필기 속도가 느리고, 중요한 내용을 놓칠 수 있음
- **사용 시나리오**: 강의 중 음성 녹음 → AI 분류 → 주제별 정리

### 핵심 사용자 플로우

#### 시나리오: 웹에서 회의 내용을 음성으로 메모
1. **로그인**: 사용자가 웹 앱에 로그인
2. **메모 시작**: '새 메모' 버튼 클릭
3. **음성 녹음**: 마이크 버튼으로 음성 녹음 시작
4. **실시간 변환**: STT 기술로 실시간 텍스트 변환 표시
5. **AI 처리**: 메모 저장 시 자동으로 AI 요약 및 카테고리 분류
6. **결과 표시**: 전체 메모와 요약본이 웹 화면에 동시 표시
7. **저장 완료**: 데이터베이스에 저장되어 웹에서 언제든지 확인 가능

### UI/UX 고려사항
- **반응형 디자인**: 모바일, 태블릿, 데스크톱 모든 기기 지원
- **직관적 인터페이스**: 최소한의 클릭으로 메모 작성 가능
- **실시간 피드백**: 음성 녹음 상태와 STT 변환 진행률 표시
- **접근성**: 키보드 네비게이션과 스크린 리더 지원

---

## Technical Architecture

### 시스템 컴포넌트

#### Frontend (Next.js 14)
- **프레임워크**: Next.js 14 with TypeScript
- **스타일링**: Tailwind CSS
- **상태 관리**: Zustand 또는 React Context
- **UI 라이브러리**: shadcn/ui 컴포넌트

#### Backend (API Routes)
- **런타임**: Next.js API Routes
- **데이터베이스**: PostgreSQL (Supabase)
- **ORM**: Drizzle ORM
- **인증**: Supabase Auth
- **파일 저장**: Supabase Storage

#### AI 서비스
- **STT**: Web Speech API 또는 Anthropic Claude
- **요약**: Anthropic Claude API
- **분류**: Anthropic Claude API

### 데이터 모델

#### User
```typescript
interface User {
  id: string;
  email: string;
  name: string;
  createdAt: Date;
  updatedAt: Date;
}
```

#### Memo
```typescript
interface Memo {
  id: string;
  userId: string;
  title: string;
  content: string;
  summary: string;
  category: string;
  tags: string[];
  audioUrl?: string;
  createdAt: Date;
  updatedAt: Date;
}
```

### API 및 통합
- **REST API**: Next.js API Routes
- **실시간 통신**: Server-Sent Events 또는 WebSocket
- **파일 업로드**: Multipart form data
- **AI 서비스**: OpenAI API, Anthropic API

### 인프라 요구사항
- **호스팅**: Vercel 또는 Netlify
- **데이터베이스**: Supabase 또는 MongoDB Atlas
- **CDN**: Vercel Edge Network
- **모니터링**: Vercel Analytics

---

## Development Roadmap

### Phase 1: MVP (핵심 기능)
- **기본 인증 시스템**: 로그인/회원가입
- **텍스트 메모 작성**: 기본 CRUD 기능
- **데이터베이스 연동**: 메모 저장 및 조회
- **기본 UI**: 반응형 레이아웃

### Phase 2: 음성 기능
- **STT 통합**: Web Speech API 또는 OpenAI Whisper
- **음성 녹음 UI**: 녹음 버튼 및 상태 표시
- **실시간 변환**: 음성을 텍스트로 실시간 변환
- **오디오 저장**: 녹음 파일 저장 및 관리

### Phase 3: AI 기능
- **AI 요약**: Anthropic Claude API를 활용한 메모 요약
- **자동 분류**: AI 기반 카테고리 및 태그 생성
- **스마트 제목**: 메모 내용 기반 자동 제목 생성
- **키워드 추출**: 중요 키워드 자동 추출

### Phase 4: 고급 기능
- **검색 시스템**: 풀텍스트 검색 및 필터링
- **태그 관리**: 사용자 정의 태그 시스템
- **메모 공유**: 팀원과 메모 공유 기능
- **내보내기**: PDF, Markdown 등 다양한 형식 내보내기

### Phase 5: 분석 및 최적화
- **사용자 통계**: 작성 빈도, 사용 패턴 분석
- **성능 최적화**: 캐싱 및 데이터베이스 최적화
- **고급 검색**: AI 기반 의미론적 검색
- **모바일 앱**: React Native 또는 PWA

---

## Logical Dependency Chain

### 1단계: 기반 구축 (Foundation)
1. **프로젝트 설정**: Next.js 14, TypeScript, Tailwind CSS
2. **데이터베이스 설계**: User, Memo 스키마 정의
3. **기본 인증**: 로그인/회원가입 시스템
4. **기본 CRUD**: 텍스트 메모 작성/수정/삭제/조회

### 2단계: 사용 가능한 프론트엔드 (Usable Frontend)
1. **메모 목록 페이지**: 사용자 메모 목록 표시
2. **메모 작성 페이지**: 텍스트 에디터 구현
3. **메모 상세 페이지**: 개별 메모 조회 및 편집
4. **반응형 레이아웃**: 모바일/데스크톱 대응

### 3단계: 음성 기능 (Voice Features)
1. **STT 서비스 연동**: Web Speech API 또는 OpenAI Whisper
2. **음성 녹음 UI**: 녹음 버튼 및 진행률 표시
3. **실시간 변환**: 음성을 텍스트로 실시간 변환
4. **오디오 파일 관리**: 녹음 파일 저장 및 재생

### 4단계: AI 기능 (AI Features)
1. **AI 요약**: Anthropic Claude API를 활용한 메모 요약
2. **자동 분류**: AI 기반 카테고리 분류
3. **스마트 제목**: 내용 기반 자동 제목 생성
4. **키워드 추출**: 중요 키워드 자동 추출

### 5단계: 고급 기능 (Advanced Features)
1. **검색 시스템**: 키워드, 날짜, 카테고리별 검색
2. **태그 시스템**: 사용자 정의 태그 관리
3. **공유 기능**: 메모 공유 및 협업
4. **내보내기**: 다양한 형식으로 메모 내보내기

---

## Risks and Mitigations

### 기술적 도전과제

#### 1. STT 정확도 문제
- **위험**: 음성 인식 정확도가 낮을 경우 사용자 경험 저하
- **완화 방안**: 
  - Web Speech API와 OpenAI Whisper 병행 사용
  - 사용자 편집 기능 제공
  - 음성 품질 가이드라인 제공

#### 2. AI API 비용 관리
- **위험**: Anthropic Claude API 사용량 증가에 따른 비용 급증
- **완화 방안**:
  - 사용량 제한 및 요금제 도입
  - 캐싱 시스템 구현
  - 대안 AI 서비스 검토

#### 3. 실시간 성능 이슈
- **위험**: 동시 사용자 증가 시 성능 저하
- **완화 방안**:
  - CDN 활용
  - 데이터베이스 인덱싱 최적화
  - 서버리스 아키텍처 활용

### MVP 범위 정의

#### 핵심 MVP 기능
1. **기본 메모 작성**: 텍스트 기반 메모 CRUD
2. **사용자 인증**: 로그인/회원가입
3. **데이터 저장**: 데이터베이스 연동
4. **기본 UI**: 반응형 웹 인터페이스

#### MVP에서 제외할 기능
1. **음성 기능**: Phase 2로 연기
2. **AI 요약**: Phase 3으로 연기
3. **고급 검색**: Phase 4로 연기
4. **통계 분석**: Phase 5로 연기

### 리소스 제약

#### 개발 리소스
- **위험**: 단일 개발자로 인한 개발 속도 제한
- **완화 방안**: 
  - 우선순위 기반 단계적 개발
  - 오픈소스 라이브러리 적극 활용
  - MVP 우선 개발 후 점진적 확장

#### 시간 제약
- **위험**: 기능 구현 시간 부족
- **완화 방안**:
  - 기능별 명확한 범위 정의
  - 기술적 부채 최소화
  - 사용자 피드백 기반 우선순위 조정

---

## Appendix

### 기술 스택 상세

#### Frontend
- **Next.js 14**: App Router, Server Components
- **TypeScript**: 타입 안정성
- **Tailwind CSS**: 유틸리티 기반 스타일링
- **shadcn/ui**: 재사용 가능한 컴포넌트
- **Zustand**: 상태 관리

#### Backend
- **Next.js API Routes**: 서버리스 함수
- **Drizzle ORM**: 데이터베이스 ORM
- **Supabase Auth**: 인증 시스템
- **Supabase**: 데이터베이스 및 스토리지

#### AI 서비스
- **Anthropic Claude API**: 메모 요약 및 분류
- **Web Speech API**: 브라우저 기반 STT

### 성능 목표
- **페이지 로드 시간**: 3초 이내
- **음성 변환 지연**: 1초 이내
- **AI 요약 응답**: 5초 이내
- **동시 사용자**: 100명 이상

### 보안 고려사항
- **데이터 암호화**: 전송 및 저장 시 암호화
- **인증 보안**: JWT 토큰 기반 인증
- **API 보안**: Rate limiting 및 CORS 설정
- **개인정보 보호**: GDPR 준수

### 확장성 계획
- **마이크로서비스**: 기능별 서비스 분리
- **캐싱**: Redis 기반 캐싱 시스템
- **CDN**: 글로벌 콘텐츠 전송
- **모니터링**: 로그 분석 및 성능 모니터링